{"version":3,"file":"component---src-pages-index-jsx-7283213bb6324f912ea8.js","mappings":"0MAAA,EAAe,IAA0B,qDCSzC,MAAMA,EAAmB,CAAAC,KAAA,SAAAC,OAAA,oFAOnBC,GAAeC,EAAAA,EAAAA,IAAG,6DAITC,EAAAA,EAAAA,GAAO,KAAI,YACdA,EAAAA,EAAAA,GAAO,KAAI,2DAINA,EAAAA,EAAAA,GAAO,GAAE,YACZA,EAAAA,EAAAA,GAAO,GAAE,SAIjBC,GAAeF,EAAAA,EAAAA,IAAG,sEAKPC,EAAAA,EAAAA,GAAO,GAAE,SAIpBE,EAAU,CAAAN,KAAA,SAAAC,OAAA,sCAKVM,GAAsBJ,EAAAA,EAAAA,IAAG,YAClBC,EAAAA,EAAAA,GAAO,GAAE,cACVA,EAAAA,EAAAA,GAAO,GAAE,mGAOfI,GAAmBL,EAAAA,EAAAA,IAAG,cACbC,EAAAA,EAAAA,GAAO,GAAE,mBACLA,EAAAA,EAAAA,GAAO,IAAI,yCAGbA,EAAAA,EAAAA,GAAO,IAAI,SAItBK,GAAyBN,EAAAA,EAAAA,IAAG,cACnBC,EAAAA,EAAAA,GAAO,GAAE,kDAIPA,EAAAA,EAAAA,GAAO,IAAI,SAItBM,EAAa,CAAAV,KAAA,SAAAC,OAAA,YAIbU,EAAoB,CAAAX,KAAA,SAAAC,OAAA,cAIpBW,EAAgB,CAAAZ,KAAA,SAAAC,OAAA,6BAKP,SAASY,EAAGC,GAAY,IAAX,KAAEC,GAAMD,EAClC,OACEE,EAAAA,EAAAA,IAACC,EAAAA,EAAM,MACLD,EAAAA,EAAAA,IAAA,YACEA,EAAAA,EAAAA,IAAA,OAAKb,IAAKJ,IACRiB,EAAAA,EAAAA,IAAA,YACEA,EAAAA,EAAAA,IAAA,MAAIb,IAAKE,GAAc,iBACvBW,EAAAA,EAAAA,IAAA,MAAIb,IAAKO,GACL,GAAEK,EAAKG,kBAAkBC,sBAG/BH,EAAAA,EAAAA,IAAA,OAAKI,QAAQ,OAAOC,IAAKC,EAAQC,IAAI,QAAQpB,IAAKD,MAEpDc,EAAAA,EAAAA,IAAA,OAAKb,IAAKI,IACRS,EAAAA,EAAAA,IAACQ,EAAAA,KAAI,CAACC,GAAG,SAAStB,IAAKG,IACrBU,EAAAA,EAAAA,IAAA,MAAIb,IAAKM,IACPO,EAAAA,EAAAA,IAAA,QAAM,aAAW,SAASU,KAAK,OAAM,MAGpC,IAAI,uBAEJ,KACDV,EAAAA,EAAAA,IAAA,QAAM,aAAW,QAAQU,KAAK,OAAM,SAOzCX,EAAKG,kBAAkBS,MAAMC,KAAIC,IAAA,IAAC,KAAEC,GAAMD,EAAA,OACzCb,EAAAA,EAAAA,IAAA,OAAKe,IAAKD,EAAKE,KACbhB,EAAAA,EAAAA,IAACQ,EAAAA,KAAI,CAACC,GAAIK,EAAKG,OAAOC,KAAM/B,IAAKG,IAC/BU,EAAAA,EAAAA,IAAA,MAAIb,IAAKK,GACNsB,EAAKK,YAAYC,MACjB,KACDpB,EAAAA,EAAAA,IAAA,QAAMb,IAAKQ,GAAsB,IAE9B,IACAmB,EAAKK,YAAYE,QAGtBrB,EAAAA,EAAAA,IAAA,SAAIc,EAAKQ,UACTtB,EAAAA,EAAAA,IAAA,KAAGb,IAAKS,GACJ,iBAAgBkB,EAAKS,qBAGvB,KAKhB,C","sources":["webpack://cdroma.me/./src/assets/avatar.jpg","webpack://cdroma.me/./src/pages/index.jsx"],"sourcesContent":["export default __webpack_public_path__ + \"static/avatar-c3629334adc293ab6e347706286b5733.jpg\";","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport { css } from '@emotion/react';\nimport PropTypes from 'prop-types';\nimport { rhythm } from '../utils/typography';\nimport Layout from '../components/layout';\nimport avatar from '../assets/avatar.jpg';\n\nconst styledHeaderWrapper = css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst styledAvatar = css`\n  font-size: 10px;\n  color: var(--bg);\n  margin-bottom: 0;\n  min-width: ${rhythm(2.6)};\n  height: ${rhythm(2.6)};\n  border-radius: 50%;\n\n  @media (max-width: 420px) {\n    min-width: ${rhythm(2)};\n    height: ${rhythm(2)};\n  }\n`;\n\nconst styledHeader = css`\n  display: inline-block;\n  margin: 0;\n\n  @media (max-width: 420px) {\n    font-size: ${rhythm(1)};\n  }\n`;\n\nconst styledLink = css`\n  text-decoration: none;\n  color: inherit;\n`;\n\nconst styledCoffeeWrapper = css`\n  padding: ${rhythm(1)} 0;\n  margin: ${rhythm(1)} 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 4px dotted var(--textLink);\n`;\n\nconst styledLinkHeader = css`\n  font-size: ${rhythm(1)};\n  margin-bottom: ${rhythm(0.5)};\n\n  @media (max-width: 420px) {\n    font-size: ${rhythm(0.8)};\n  }\n`;\n\nconst styledCoffeeLinkHeader = css`\n  font-size: ${rhythm(1)};\n  margin: 0;\n\n  @media (max-width: 420px) {\n    font-size: ${rhythm(0.8)};\n  }\n`;\n\nconst styledCounter = css`\n  margin: 0;\n`;\n\nconst styledLinkHeaderDate = css`\n  color: #bbb;\n`;\n\nconst styledTimeToRead = css`\n  color: #bbb;\n  font-size: 13px;\n`;\n\nexport default function App({ data }) {\n  return (\n    <Layout>\n      <div>\n        <div css={styledHeaderWrapper}>\n          <div>\n            <h1 css={styledHeader}>Roman&#39;s Blog</h1>\n            <h4 css={styledCounter}>\n              {`${data.allMarkdownRemark.totalCount} Notes`}\n            </h4>\n          </div>\n          <img loading=\"lazy\" src={avatar} alt=\"Roman\" css={styledAvatar} />\n        </div>\n        <div css={styledCoffeeWrapper}>\n          <Link to=\"coffee\" css={styledLink}>\n            <h3 css={styledCoffeeLinkHeader}>\n              <span aria-label=\"Coffee\" role=\"img\">\n                ‚òïÔ∏è\n              </span>\n              {' '}\n              The Coffee Blog here\n              {' '}\n              <span aria-label=\"Click\" role=\"img\">\n                üëà\n              </span>\n            </h3>\n          </Link>\n        </div>\n\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <div key={node.id}>\n            <Link to={node.fields.slug} css={styledLink}>\n              <h3 css={styledLinkHeader}>\n                {node.frontmatter.title}\n                {' '}\n                <span css={styledLinkHeaderDate}>\n                  ‚Äî\n                  {' '}\n                  {node.frontmatter.date}\n                </span>\n              </h3>\n              <p>{node.excerpt}</p>\n              <p css={styledTimeToRead}>\n                {`Time to read: ${node.timeToRead}  min.`}\n              </p>\n            </Link>\n          </div>\n        ))}\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n        }\n      }\n    }\n  }\n`;\n\nApp.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired, // Assuming date is returned as a string\n            }).isRequired,\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number.isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n\n};\n"],"names":["styledHeaderWrapper","name","styles","styledAvatar","css","rhythm","styledHeader","styledLink","styledCoffeeWrapper","styledLinkHeader","styledCoffeeLinkHeader","styledCounter","styledLinkHeaderDate","styledTimeToRead","App","_ref","data","___EmotionJSX","Layout","allMarkdownRemark","totalCount","loading","src","avatar","alt","Link","to","role","edges","map","_ref2","node","key","id","fields","slug","frontmatter","title","date","excerpt","timeToRead"],"sourceRoot":""}