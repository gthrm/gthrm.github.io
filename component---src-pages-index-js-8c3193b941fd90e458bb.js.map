{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["data","css","rhythm","loading","src","alt","allMarkdownRemark","totalCount","edges","map","node","key","id","to","fields","slug","frontmatter","title","date","excerpt","timeToRead","query"],"mappings":"2FAAA,2G,qPAMe,0BAAGA,EAAH,EAAGA,KAAH,OACb,YAAC,IAAD,KACE,uBACE,mBACEC,IAAG,GAOH,kBACEA,IAAKA,YAAF,sCAEcC,YAAO,GAFrB,4BADL,mCAUA,mBACEC,QAAQ,OACRC,IAAI,gFACJC,IAAI,sBACJJ,IAAKA,YAAF,sCAEgBC,YAAO,GAFvB,WAGaA,YAAO,GAHpB,8DAQcA,YAAO,KARrB,WASWA,YAAO,KATlB,0BAcP,sBACGF,EAAKM,kBAAkBC,WACvB,IAFH,SAKCP,EAAKM,kBAAkBE,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAChC,mBAAKC,IAAKD,EAAKE,IACb,YAAC,IAAD,CACEC,GAAIH,EAAKI,OAAOC,KAChBd,IAAG,GAKH,kBACEA,IAAKA,YAAF,iBACgBC,YAAO,EAAI,GAD3B,MAIFQ,EAAKM,YAAYC,MACjB,IACD,oBACEhB,IAAG,GADL,IAMG,IACAS,EAAKM,YAAYE,OAGtB,qBAAIR,EAAKS,SACT,iBACElB,IAAG,GADL,gBAOGS,EAAKU,WACL,IARH,gBAkBL,IAAMC,EAAK","file":"component---src-pages-index-js-8c3193b941fd90e458bb.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport { css } from '@emotion/core';\nimport { rhythm } from '../utils/typography';\nimport Layout from '../components/layout';\n\nexport default ({ data }) => (\n  <Layout>\n    <div>\n      <div\n        css={css`\n            @media (max-width: 550px) {\n              display: inline-block;\n            }\n            display:flex;\n          `}\n      >\n        <h1\n          css={css`\n            @media (max-width: 420px) {\n              font-size: ${rhythm(1)};\n            }\n            display: inline-block;\n          `}\n        >\n          Notes by Roman Mesheshcheriakov\n        </h1>\n        <img\n          loading=\"lazy\"\n          src=\"https://pbs.twimg.com/profile_images/1250156684892307456/DvGRkppG_400x400.jpg\"\n          alt=\"Roman Meshcheriakov\"\n          css={css`\n              @media (max-width: 420px) {\n                min-width: ${rhythm(2)};\n                height: ${rhythm(2)};\n              }\n              font-size: 10px;\n              color: var(--bg);\n              margin-bottom: 0;\n              min-width: ${rhythm(2.6)};\n              height: ${rhythm(2.6)};\n              border-radius: 50%;\n            `}\n        />\n      </div>\n      <h4>\n        {data.allMarkdownRemark.totalCount}\n        {' '}\n        Notes\n      </h4>\n      {data.allMarkdownRemark.edges.map(({ node }) => (\n        <div key={node.id}>\n          <Link\n            to={node.fields.slug}\n            css={css`\n                text-decoration: none;\n                color: inherit;\n              `}\n          >\n            <h3\n              css={css`\n                margin-bottom: ${rhythm(1 / 4)};\n              `}\n            >\n              {node.frontmatter.title}\n              {' '}\n              <span\n                css={css`\n                  color: #bbb;\n                `}\n              >\n                â€”\n                {' '}\n                {node.frontmatter.date}\n              </span>\n            </h3>\n            <p>{node.excerpt}</p>\n            <p\n              css={css`\n                color: #bbb;\n                font-size: 13px;\n              `}\n            >\n              Time to read:\n              {node.timeToRead}\n              {' '}\n              min.\n            </p>\n          </Link>\n        </div>\n      ))}\n    </div>\n  </Layout>\n);\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}