{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/rus/how-the-browser-renders-a-web-page/","result":{"data":{"markdownRemark":{"html":"<p>И так, я как разработчик собираюсь создавать быстрые и надежные веб-сайты, для этого мне нужно понимать механику каждого шага, который браузер выполняет для отображения веб-страницы, чтобы каждый шаг мог быть рассмотрен и оптимизирован во время разработки. Этот пост представляет собой <strong>краткое</strong> изложение фактов о этом процессе.</p>\n<h2>Процесс можно разбить на следующие основные стадии:</h2>\n<ul>\n<li>Парсинг HTML в DOM</li>\n<li>Получение внешних ресурсов</li>\n<li>Парсинг CSS и создание CSSOM</li>\n<li>Выполнение JavaScript</li>\n<li>Объединение DOM и CSSOM для построения рендер-дерева</li>\n<li>Расчет макета и отрисовка</li>\n</ul>\n<h2>Парсинг HTML</h2>\n<p>Когда браузер получает HTML страницу из сети, он парсит HTML в Document Object Model (DOM).\nРазбивает HTML на <strong>токены</strong>, которы представляют собой <strong>начальные теги</strong>, <strong>конечные теги</strong> и их <strong>содержимое</strong> . Из этого браузер строит DOM.</p>\n<p><img src=\"https://cloud.cdroma.ru/upload/2900d46cf4572086bb3a71a2004f4bc81603967819483.png\" alt=\"parse the html\"></p>\n<h2>Получение внешних ресурсов</h2>\n<p>Когда парсер встречает внешний ресурс, такой как файл CSS или JavaScript, он останавливается, чтобы запросить эти файлы. Парсер продолжит работу когда CSS начнёт загружаться, хотя он будет <strong>блокировать рендеринг</strong>, пока он не будет загружен и пропаршен (подробнее об этом чуть позже).</p>\n<p>Файлы <strong>JavaScript</strong> немного отличаются - по умолчанию они блокируют парсинг HTML, пока файл JavaScript загружается, а затем парсится. Есть два атрибута, которые можно добавить в теги сценария, чтобы улучшить это: <code>defer</code> и <code>async</code>. Оба позволяют парсеру продолжать работу, пока файл JavaScript загружается в фоновом режиме, но они работают по-разному в том, как они выполняются. Подробнее об этом:</p>\n<p><code>defer</code> означает, что выполнение файла будет отложено до завершения парсинга документа. Если несколько файлов имеют атрибут defer, они будут выполняться в том порядке, в котором они были обнаружены в HTML.</p>\n<pre><code class=\"language-javascript\">&#x3C;script type=\"text/javascript\" src=\"script.js\" defer>\n</code></pre>\n<p><code>async</code> означает, что файл будет выполнен, как только он загрузится, что может быть во время или после процесса парсинга, и поэтому порядок, в котором выполняются асинхронные сценарии, не может быть гарантирован.</p>\n<pre><code class=\"language-javascript\">&#x3C;script type=\"text/javascript\" src=\"script.js\" async>\n</code></pre>\n<p>Кроме того, современные браузеры будут продолжать сканировать HTML-код, пока он заблокирован, и \"смотреть\" на то, какие внешние ресурсы определены дальше, а затем загружать их. То, как браузеры это делают, варьируется в зависимости от браузера, поэтому нельзя полагаться на то, что они будут вести себя определенным образом. Чтобы пометить ресурс как важный и, следовательно, с большей вероятностью быть загруженным на ранней стадии процесса рендеринга, можно использовать тег ссылки с <a href=\"https://developer.mozilla.org/ru/docs/Web/HTML/Preloading_content\">rel=\"preload\"</a>.</p>\n<pre><code class=\"language-javascript\">&#x3C;link href=\"style.css\" rel=\"preload\" as=\"style\" />\n</code></pre>\n<p><img src=\"https://cloud.cdroma.ru/upload/de89cbe7244a704261ec4bd7d8a5bd131603969108205.png\" alt=\"Получение внешних ресурсов\"></p>\n<h2>Парсинг CSS и создание CSSOM</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSSOM\">CSSOM</a> - это карта всех селекторов CSS и соответствующих свойств для каждого селектора в форме дерева с корневым узлом, родственником, потомком, дочерним элементом и другими отношениями. CSSOM очень похож на объектную модель документа (DOM). Оба они являются частью пути рендеринга, который представляет собой серию шагов, которые должны произойти для правильного рендеринга веб-сайта.</p>\n<p>CSSOM вместе с DOM необходим для построения дерева рендеринга, которое, в свою очередь, используется браузером для компоновки и отрисовки веб-страницы.</p>\n<p>Подобно <strong>HTML</strong> и <strong>DOM</strong>, когда файлы <strong>CSS</strong> загружаются, они должны быть пропаршены и преобразованы в дерево - на этот раз <strong>CSSOM</strong>. Он описывает все селекторы CSS на странице, их иерархию и их свойства.</p>\n<p>CSSOM отличается от DOM, тем, что он не может быть построен постепенно, поскольку правила CSS могут перезаписывать друг друга в из-за <a href=\"https://developer.mozilla.org/ru/docs/Web/CSS/Specificity\">специфичности</a>. Вот почему CSS блокирует рендеринг, поскольку до тех пор, пока весь CSS не будет проанализирован и не будет построен CSSOM, браузер не может знать, где и как разместить каждый элемент на экране.</p>\n<p><img src=\"https://cloud.cdroma.ru/upload/e40b18af0d79d7d86179c457aa28005a1603970058277.jpeg\" alt=\"Парсинг CSS и создание CSSOM\"></p>\n<h2>Выполнение JavaScript</h2>\n<p>После того, как синхронно загруженный JavaScript и DOM будут полностью спаршены и готовы, будет сгенерировано событие <a href=\"https://developer.mozilla.org/ru/docs/Web/API/Document/DOMContentLoaded_event\">document.DOMContentLoaded</a>. Для любых сценариев, которым требуется доступ к модели DOM, например, для управления ею или прослушивания событий взаимодействия с пользователем, рекомендуется сначала дождаться этого события перед выполнением сценариев.</p>\n<pre><code class=\"language-javascript\">document.addEventListener('DOMContentLoaded', (event) => {\n    // You can now safely access the DOM\n});\n</code></pre>\n<p>А после того, как все остальное, например асинхронный JavaScript, изображения и т.д., завершили загрузку, запускается событие <a href=\"https://developer.mozilla.org/ru/docs/Web/Events/load\">window.load</a>.</p>\n<pre><code class=\"language-javascript\">window.addEventListener('load', (event) => {\n    // The page has now fully loaded\n});\n</code></pre>\n<p><img src=\"https://cloud.cdroma.ru/upload/89913c1fdfbfb97c923543839a4ebe9c1603970486086.png\" alt=\"Выполнение JavaScript\"></p>\n<h2>Объединение DOM и CSSOM для построения рендер-дерева</h2>\n<p><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction\">Рендер дерево</a> представляет собой сочетание DOM и CSSOM, а так же то, что будет отрендерено на страницу. Это не обязательно означает, что все узлы в дереве рендеринга будут визуально присутствовать, например узлы со стилями <code>opacity: 0</code> или <code>visibility: hidden</code> будут включены, и все еще могут быть прочитаны средством чтения с экрана и т.д., тогда как те, которые установлены на <code>display: none</code>, не будут включены. Кроме того, такие теги, как <code>&#x3C;head></code> не содержащие визуальной информации, всегда будут пропущены.</p>\n<p>Как и в случае с движками JavaScript, разные браузеры имеют разные <a href=\"https://en.wikipedia.org/wiki/Comparison_of_browser_engines\">механизмы рендеринга</a>.</p>\n<p><img src=\"https://cloud.cdroma.ru/upload/1211290eccd89fc9d039a0787e5628bd1603970868819.png\" alt=\"Объединение DOM и CSSOM для постоения рендер-дерева\"></p>\n<h2>Расчет макета и отрисовка</h2>\n<p>Теперь, когда у нас есть полное дерево рендеринга, браузер знает, что рендерить, но не знает, где рендерить. Следовательно, необходимо рассчитать макет страницы (т.е. положение и размер каждого узла). Механизм рендеринга проходит дерево рендеринга, с вершины вниз, вычисляя координаты, в которых должен отображаться каждый узел.</p>\n<p>Как только это будет сделано, последний шаг - взять эту информацию о макете и отрисвать пиксели на экране.</p>\n<p>И вуаля! В конце концов, у нас есть полностью отрисованная веб-страница!</p>\n<p><img src=\"https://cloud.cdroma.ru/upload/92b92971efe1e76b06f45518935c281f1603971427741.png\" alt=\"Расчет макета и отрисовка\"></p>\n<p><a href=\"https://dev.to/jstarmx/how-the-browser-renders-a-web-page-1ahc?utm_source=digest_mailer&#x26;utm_medium=email&#x26;utm_campaign=digest_email\">Оригинальная статья</a></p>","frontmatter":{"title":"Как браузер отображает веб-страницу"}}},"pageContext":{"slug":"/rus/how-the-browser-renders-a-web-page/"}},"staticQueryHashes":["1777174035","3159585216"],"slicesMap":{}}