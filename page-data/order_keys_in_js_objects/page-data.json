{"componentChunkName":"component---src-templates-blog-post-js","path":"/order_keys_in_js_objects/","result":{"data":{"markdownRemark":{"html":"<p><strong>Объекты</strong> в JS были <code>'unordered'</code> до <strong>ES5</strong>.\nНачиная с <strong>ES6</strong>, существует предсказуемый порядок итерации свойств объекта.</p>\n<ol>\n<li>Все неотрицательные целочисленные ключи меньше <strong>2<sup>32</sup></strong> , в порядке возрастания. (например, <code>'1'</code>, <code>'79'</code> и т. д.). Обычно, все допустимые индексы массива. <em>(не отрицательные числа до 2<sup>32</sup>)</em>.</li>\n</ol>\n<blockquote>\n<p><em>Предостережение</em>: <code>'05'</code> не будет считаться целочисленным ключом, так как целое число, проанализированное из него, даст другое строковое представление.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Все строковые ключи в исходном порядке вставки (в том порядке, в котором они были добавлены в объект).</li>\n</ol>\n<blockquote>\n<p>Здесь будут рассмотрены числовые строки, не попадающие в пределы первого шага и числа с плавающей запятой.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Свойства, имена которых являются символами, перечислены в том порядке, в котором они были добавлены в объект.</li>\n</ol>\n<p>Если порядок перечисления релевантен, вы всегда можете использовать <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a>, который гарантирует, что порядок вставки будет сохранен.</p>\n<h2>Функции, перечисляющие свойства в описанном выше порядке с учетом их собственных ограничений</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a></li>\n<li><a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a></li>\n<li><a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></li>\n<li><a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\"><code>Reflect.ownKeys()</code></a></li>\n</ul>\n<blockquote>\n<p>Следует иметь в виду, что порядок перечисления для цикла <strong>for in</strong> не так строго определен, как для функций выше, но обычно перечисление собственных свойств происходит в описанном порядке.</p>\n</blockquote>\n<blockquote>\n<p>Поскольку цикл <strong>for in</strong> также перечисляет свойства в цепочке прототипов, то после перечисления собственных свойств он будет двигаться <em>вверх по цепочке прототипов</em>, перечисляя свойства каждого объекта прототипа <em>в том же порядке, как описано выше</em>.</p>\n</blockquote>\n<blockquote>\n<p>Если свойство уже <strong>было перечислено</strong>, то любое свойство с тем же именем <strong>не будет</strong> перечислено снова.</p>\n</blockquote>\n<blockquote>\n<p>Свойство <strong>не будет</strong> перечислено, даже если уже было рассмотрено неисчислимое свойство с тем же именем.</p>\n</blockquote>","frontmatter":{"title":"Порядок хранения/перечисления ключей в объекте JS"}}},"pageContext":{"slug":"/order_keys_in_js_objects/"}},"staticQueryHashes":["1777174035","3159585216"]}