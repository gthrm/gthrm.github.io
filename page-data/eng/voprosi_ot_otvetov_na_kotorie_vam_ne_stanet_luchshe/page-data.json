{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/eng/voprosi_ot_otvetov_na_kotorie_vam_ne_stanet_luchshe/","result":{"data":{"site":{"siteMetadata":{"title":"cdROma.me"}},"markdownRemark":{"html":"<p>I created this note to jot down questions that were (or were not) asked of me in (or out of) JS interviews.</p>\n<p>Here you won't find answers to these questions (or maybe a few), just questions.</p>\n<p>And when you find answers to these questions elsewhere, it won't make you feel any better. These are just questions that someone asks someone.</p>\n<hr>\n<h2>React JS / Native</h2>\n<hr>\n<ul>\n<li>What is the life cycle of a component? What arguments come in which method? Where and how is it best to update the state?</li>\n<li>What is a functional component and PureComponent? What's the difference?</li>\n<li>What is Redux?</li>\n<li>What are side-effects?</li>\n<li>What kinds of middlewares are there in Redux?</li>\n<li>What is redux-thunk used for?</li>\n<li>What is redux-saga built on (generators) and what is it used for?</li>\n<li>React Router and redux-router. What? Why? How?</li>\n<li>Why is the second argument used in the setState function?</li>\n<li>From which version of React have you been using and what major changes have occurred during this time?</li>\n<li>What breaking changes occurred in version 16?</li>\n<li>What is the Context API and what changes have occurred in it?</li>\n<li>What is Flux architecture and how does it differ from the Redux implementation?</li>\n<li>React and Vue - which is better and for what tasks?</li>\n<li>Redux and MobX - which is better and for what tasks? What other libraries are there for managing the state of an application?</li>\n<li>Server-Side Rendering?</li>\n<li>What is a Higher-Ordered Component?</li>\n<li>What is React Native? Why is it used? What's the difference from regular React? (yes, that's exactly how they asked me)</li>\n<li>How to render a component at a specified time?</li>\n</ul>\n<h2>Java Script</h2>\n<hr>\n<ul>\n<li>So what is a <em>closure</em>, finally!?</li>\n<li>How does the Event Loop work? Tasks, microtasks, queues, etc.?</li>\n<li>What is garbage collector in js and how does it work? (no references - no object, there is a reference - there is suffering)</li>\n<li>What is delegation? (when we hang a handler on a container and check the click on the element inside - yes, they still ask)</li>\n<li>What is LocalStorage and how is it different from Cookies? How to protect a cookie so that it cannot be read by js (HttpOnly flag)?</li>\n<li>What is WebSocket? What is long-polling and how are they different? What problems do they solve?</li>\n<li>ServiceWorker / WebWorker / SharedWorker? What is it? Why? How?</li>\n<li>event.preventDefault() and event.stopPropagation() - why and when?</li>\n<li>What's interesting in the new proposals and what are you looking forward to the most?</li>\n<li>What is a higher-ordered function? (once I was asked an additional question - \"can you pass a function to it?\" and it was a very strange question!)</li>\n<li>What is a Promise? How to debug errors?</li>\n<li>What is Async/Await and what do transpilers compile it into? And how to debug them?</li>\n<li>What are generators?</li>\n<li>What is Proxy?</li>\n<li>TypeScript / Flow? What is it and why is it?</li>\n<li>What is optimistic rendering? How would you implement it?</li>\n<li>What is virtual scroll? How does it work?</li>\n<li>What is node.js?</li>\n<li>What is d3? Why is it needed?</li>\n<li>How do generators work?</li>\n<li>Write a generator that implements the Fibonacci sequence (live coding is not my thing at all, after the interview I thought and <a href=\"https://gist.github.com/gthrm/7274dc2bf8149944f8360325a6673642\">wrote</a>)</li>\n</ul>\n<h2>DOM</h2>\n<ul>\n<li>DOM Events: 3 phases of event propagation (\nCapturing phase - the event goes down from the top.\nTarget phase - the event reaches the target (source) element.\nBubbling stage - the event starts to rise.</li>\n</ul>\n<p>).</p>\n<ul>\n<li>How to prevent bubbling? (event.stopPropagation(), event.stopImmediatePropagation())</li>\n</ul>\n<h2>CSS</h2>\n<hr>\n<ul>\n<li>If it comes to css, for some reason they still ask about ways to \"center a block in the middle of the screen\". In 2k18!</li>\n<li>Preprocessors and their pros/cons relative to each other (this is usually a question about experience and somehow no one asked about postcss)?</li>\n<li>css-modules / styled-components. What is it? Why? Pros and cons?</li>\n<li>What are the values for display and are there any elements that are inline-block by default (img)?</li>\n<li>What's the difference between opacity: 0 and opacity: 0.00001?</li>\n<li>What's the difference between visibility: hidden and display: none?</li>\n<li><a href=\"https://webref.ru/course/float/clearfix\">What is float? How to clear it? What does .clearfix consist of</a>?</li>\n<li>What's the difference between box-sizing: content-box and border-box?</li>\n<li>Through which directives is responsive design implemented?</li>\n<li>What color will the text be if ...</li>\n</ul>\n<h2>Other Browser</h2>\n<hr>\n<ul>\n<li>What is SVG? What are the ways to insert SVG on the page? SVG animations?</li>\n<li>What is canvas and why is it so fast?</li>\n<li>What are the ways to optimize the application? (sprites, minification, lazy-load, etc.)</li>\n<li>How many simultaneous requests can be sent from the browser to a specific domain? How is the problem with the limitation solved? Does http/2 solve it?</li>\n</ul>\n<h2>Other Programming</h2>\n<hr>\n<ul>\n<li>What patterns are there? List the ones you know and explain briefly? (usually they talk about mediator, factory, and decorator)</li>\n<li>What design patterns do you know and what are their features? (like MVC and MVVM)</li>\n<li>What is a pure function?</li>\n<li>What types of programming languages are there (functional/imperative)? What is the essence of these paradigms? To which paradigm does JS belong?</li>\n<li>How do compiled languages differ from interpreted ones? What are the interpreted languages? Where is their code interpreted?</li>\n<li>What is Rx?</li>\n<li>What is REST and how does it differ from RPC? CRUD?</li>\n<li>What's the difference between GET and POST? What other types of requests are there and what are they used for?</li>\n<li>At what level of OSI do http / tcp / ping / json / twisted pair occur?</li>\n<li>What happens after a request from a browser to open a certain page?</li>\n<li>S.O.L.I.D.?</li>\n<li>What is JSON? What is XML? Continue the list (I only remembered YAML)? Can XML be converted to JSON?</li>\n<li>What is protobuf and messagepack? What's the difference?</li>\n<li>What are microservices? Why are they? What problems does microservice architecture solve?</li>\n<li>What is mutability and immutability?</li>\n</ul>\n<p>After all this, one most important question remains in mind: did I become happier knowing the answers to all these questions?</p>\n<p><img src=\"https://cloud.cdroma.ru/upload/18abc9fb-dbdb-4161-a48c-48789b974458-1700955531715.jpeg\" alt=\"alt text\"></p>","frontmatter":{"title":"Questions That Won't Make You Feel Better After Knowing the Answers"}}},"pageContext":{"slug":"/eng/voprosi_ot_otvetov_na_kotorie_vam_ne_stanet_luchshe/"}},"staticQueryHashes":["1777174035","3159585216"],"slicesMap":{}}